{"ast":null,"code":"export var useSortContactAlpha=function useSortContactAlpha(inputList){var ascending=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var sortBy=arguments.length>2?arguments[2]:undefined;if(ascending&&sortBy===\"first-name\"){var sortedList=inputList.sort(function(a,b){if(a.firstName<b.firstName){return-1;}if(a.firstName>b.firstName){return 1;}return 0;});return sortedList;}if(!ascending&&sortBy===\"last-name\"){var _sortedList=inputList.sort(function(a,b){if(a.firstName>b.firstName){return-1;}if(a.firstName<b.firstName){return 1;}return 0;});return _sortedList;}if(ascending&&sortBy===\"last-name\"){var _sortedList2=inputList.sort(function(a,b){if(a.lastName<b.lastName){return-1;}if(a.lastName>b.lastName){return 1;}return 0;});return _sortedList2;}if(!ascending&&sortBy===\"last-name\"){var _sortedList3=inputList.sort(function(a,b){if(a.lastName>b.lastName){return-1;}if(a.lastName<b.lastName){return 1;}return 0;});return _sortedList3;}};// export const useSortAlpha = (inputList, ascending = true, byFirstName = true) => {\n//   function firstNameAscending(a, b) {\n//     if (a.firstName < b.firstName) {\n//       return -1;\n//     }\n//     if (a.firstName > b.firstName) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n//   function firstNameDescending(a, b) {\n//     if (a.firstName > b.firstName) {\n//       return -1;\n//     }\n//     if (a.firstName < b.firstName) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n//   function listSort(inputList, ascending, byFirstName) {\n//       switch (ascending, byFirstName) {\n//       }\n//   }\n// };","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/utils/useSortContactAlpha.js"],"names":["useSortContactAlpha","inputList","ascending","sortBy","sortedList","sort","a","b","firstName","lastName"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,SAAD,CAAyC,IAA7BC,CAAAA,SAA6B,2DAAjB,IAAiB,IAAXC,CAAAA,MAAW,2CAC1E,GAAID,SAAS,EAAIC,MAAM,GAAK,YAA5B,CAA0C,CACxC,GAAMC,CAAAA,UAAU,CAAGH,SAAS,CAACI,IAAV,CAAe,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC/C,GAAID,CAAC,CAACE,SAAF,CAAcD,CAAC,CAACC,SAApB,CAA+B,CAC7B,MAAO,CAAC,CAAR,CACD,CACD,GAAIF,CAAC,CAACE,SAAF,CAAcD,CAAC,CAACC,SAApB,CAA+B,CAC7B,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CARkB,CAAnB,CASA,MAAOJ,CAAAA,UAAP,CACD,CAED,GAAI,CAACF,SAAD,EAAcC,MAAM,GAAK,WAA7B,CAA0C,CACxC,GAAMC,CAAAA,WAAU,CAAGH,SAAS,CAACI,IAAV,CAAe,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC/C,GAAID,CAAC,CAACE,SAAF,CAAcD,CAAC,CAACC,SAApB,CAA+B,CAC7B,MAAO,CAAC,CAAR,CACD,CACD,GAAIF,CAAC,CAACE,SAAF,CAAcD,CAAC,CAACC,SAApB,CAA+B,CAC7B,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CARkB,CAAnB,CASA,MAAOJ,CAAAA,WAAP,CACD,CAED,GAAIF,SAAS,EAAIC,MAAM,GAAK,WAA5B,CAAyC,CACvC,GAAMC,CAAAA,YAAU,CAAGH,SAAS,CAACI,IAAV,CAAe,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC/C,GAAID,CAAC,CAACG,QAAF,CAAaF,CAAC,CAACE,QAAnB,CAA6B,CAC3B,MAAO,CAAC,CAAR,CACD,CACD,GAAIH,CAAC,CAACG,QAAF,CAAaF,CAAC,CAACE,QAAnB,CAA6B,CAC3B,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CARkB,CAAnB,CASA,MAAOL,CAAAA,YAAP,CACD,CAED,GAAI,CAACF,SAAD,EAAcC,MAAM,GAAK,WAA7B,CAA0C,CACxC,GAAMC,CAAAA,YAAU,CAAGH,SAAS,CAACI,IAAV,CAAe,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC/C,GAAID,CAAC,CAACG,QAAF,CAAaF,CAAC,CAACE,QAAnB,CAA6B,CAC3B,MAAO,CAAC,CAAR,CACD,CACD,GAAIH,CAAC,CAACG,QAAF,CAAaF,CAAC,CAACE,QAAnB,CAA6B,CAC3B,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CARkB,CAAnB,CASA,MAAOL,CAAAA,YAAP,CACD,CACF,CApDM,CAsDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA","sourcesContent":["export const useSortContactAlpha = (inputList, ascending = true, sortBy) => {\n  if (ascending && sortBy === \"first-name\") {\n    const sortedList = inputList.sort(function(a, b) {\n      if (a.firstName < b.firstName) {\n        return -1;\n      }\n      if (a.firstName > b.firstName) {\n        return 1;\n      }\n      return 0;\n    });\n    return sortedList;\n  }\n\n  if (!ascending && sortBy === \"last-name\") {\n    const sortedList = inputList.sort(function(a, b) {\n      if (a.firstName > b.firstName) {\n        return -1;\n      }\n      if (a.firstName < b.firstName) {\n        return 1;\n      }\n      return 0;\n    });\n    return sortedList;\n  }\n\n  if (ascending && sortBy === \"last-name\") {\n    const sortedList = inputList.sort(function(a, b) {\n      if (a.lastName < b.lastName) {\n        return -1;\n      }\n      if (a.lastName > b.lastName) {\n        return 1;\n      }\n      return 0;\n    });\n    return sortedList;\n  }\n\n  if (!ascending && sortBy === \"last-name\") {\n    const sortedList = inputList.sort(function(a, b) {\n      if (a.lastName > b.lastName) {\n        return -1;\n      }\n      if (a.lastName < b.lastName) {\n        return 1;\n      }\n      return 0;\n    });\n    return sortedList;\n  }\n};\n\n// export const useSortAlpha = (inputList, ascending = true, byFirstName = true) => {\n//   function firstNameAscending(a, b) {\n//     if (a.firstName < b.firstName) {\n//       return -1;\n//     }\n//     if (a.firstName > b.firstName) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n\n//   function firstNameDescending(a, b) {\n//     if (a.firstName > b.firstName) {\n//       return -1;\n//     }\n//     if (a.firstName < b.firstName) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n\n//   function listSort(inputList, ascending, byFirstName) {\n//       switch (ascending, byFirstName) {\n\n//       }\n//   }\n\n// };\n"]},"metadata":{},"sourceType":"module"}