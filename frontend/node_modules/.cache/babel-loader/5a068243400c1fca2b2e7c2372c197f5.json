{"ast":null,"code":"import _slicedToArray from\"/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Link}from\"react-router-dom\";import{useModal}from\"../../../../utils\";import{Modal,ModalArea,ModalCloseIcon}from\"../../../utilities\";import{PageHeading,Typography,TextLink}from\"../../../../styled/typography\";import{GridWrapper,InputWrapper,FlexWrapper}from\"../../../../styled/containers\";import{Select,Label}from\"../../../../styled/forms\";import{RedButton,BlackButton}from\"../../../../styled/buttons\";import{darkGrey}from\"../../../../styled/defaults\";export var ViewDrivesModal=function ViewDrivesModal(_ref){var totalDrives=_ref.totalDrives,totalStorage=_ref.totalStorage,drives=_ref.drives;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];var _useModal=useModal(),isShowing=_useModal.isShowing,toggle=_useModal.toggle;return React.createElement(React.Fragment,null,React.createElement(BlackButton,{small:true,onClick:function onClick(){return toggle();}},\"View Drives\"),React.createElement(Modal,{isShowing:isShowing,toggle:toggle},React.createElement(ModalArea,null,React.createElement(ModalCloseIcon,{toggle:toggle}),React.createElement(PageHeading,null,\"Drives\"),React.createElement(FlexWrapper,{padding:\"20px 0 0 0\",justifyContent:\"space-evenly\"},React.createElement(Typography,{fontSize:\"18px\",fontWeight:\"700\"},\"\".concat(totalDrives,\" Drives\")),React.createElement(Typography,{fontSize:\"18px\",fontWeight:\"700\"},\"\".concat(totalStorage))),React.createElement(GridWrapper,{as:\"form\",minWidth:\"508px\",maxWidth:\"508px\",margin:\"20px 0 0 0 \",gridGap:\"0\"},React.createElement(InputWrapper,{gridColumn:\"4 / 10\"},React.createElement(Label,null,\"Drive\"),React.createElement(Select,{placeholder:\"Select Drive\",defaultOption:\"---\"},React.createElement(\"option\",{value:\"---\"},\"---\"),React.createElement(\"option\",null,\"Drive A\"))),React.createElement(InputWrapper,{gridColumn:\"4 / 10\"},React.createElement(RedButton,{small:true,minWidth:\"100%\"},\"Add / Edit\"))),React.createElement(GridWrapper,{minWidth:\"508px\",maxWidth:\"508px\",margin:\"20px 0 0 0 \"},drives.map(function(drive){return React.createElement(FlexWrapper,{key:drive.id,padding:\" 0 10px\",gridColumn:\"span 3\"},React.createElement(TextLink,{as:Link,className:\"hover\",fontSize:\"18px\",margin:\"0 10px 0 0\"},drive.drive.driveNumber),React.createElement(Typography,{fontColor:darkGrey},drive.drive.driveCapacityGb));})))));};","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/components/RentalProjects/Detail/ButtonModals/ViewDrivesModal.js"],"names":["React","useState","Link","useModal","Modal","ModalArea","ModalCloseIcon","PageHeading","Typography","TextLink","GridWrapper","InputWrapper","FlexWrapper","Select","Label","RedButton","BlackButton","darkGrey","ViewDrivesModal","totalDrives","totalStorage","drives","notes","setNotes","isShowing","toggle","map","drive","id","driveNumber","driveCapacityGb"],"mappings":"mKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,QAAT,KAAyB,mBAAzB,CAEA,OAASC,KAAT,CAAgBC,SAAhB,CAA2BC,cAA3B,KAAiD,oBAAjD,CACA,OACEC,WADF,CAEEC,UAFF,CAGEC,QAHF,KAIO,+BAJP,CAKA,OACEC,WADF,CAEEC,YAFF,CAGEC,WAHF,KAIO,+BAJP,CAKA,OAASC,MAAT,CAAiBC,KAAjB,KAA8B,0BAA9B,CACA,OAASC,SAAT,CAAoBC,WAApB,KAAuC,4BAAvC,CACA,OAASC,QAAT,KAAyB,6BAAzB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAA2C,IAAxCC,CAAAA,WAAwC,MAAxCA,WAAwC,CAA3BC,YAA2B,MAA3BA,YAA2B,CAAbC,MAAa,MAAbA,MAAa,eAC9CpB,QAAQ,CAAC,EAAD,CADsC,wCACjEqB,KADiE,eAC1DC,QAD0D,6BAG1CpB,QAAQ,EAHkC,CAGhEqB,SAHgE,WAGhEA,SAHgE,CAGrDC,MAHqD,WAGrDA,MAHqD,CAKxE,MACE,yCACE,oBAAC,WAAD,EAAa,KAAK,KAAlB,CAAmB,OAAO,CAAE,yBAAMA,CAAAA,MAAM,EAAZ,EAA5B,gBADF,CAKE,oBAAC,KAAD,EAAO,SAAS,CAAED,SAAlB,CAA6B,MAAM,CAAEC,MAArC,EACE,oBAAC,SAAD,MACE,oBAAC,cAAD,EAAgB,MAAM,CAAEA,MAAxB,EADF,CAGE,oBAAC,WAAD,eAHF,CAIE,oBAAC,WAAD,EAAa,OAAO,CAAC,YAArB,CAAkC,cAAc,CAAC,cAAjD,EACE,oBAAC,UAAD,EAAY,QAAQ,CAAC,MAArB,CAA4B,UAAU,CAAC,KAAvC,YACMN,WADN,YADF,CAIE,oBAAC,UAAD,EAAY,QAAQ,CAAC,MAArB,CAA4B,UAAU,CAAC,KAAvC,YACMC,YADN,EAJF,CAJF,CAYE,oBAAC,WAAD,EACE,EAAE,CAAC,MADL,CAEE,QAAQ,CAAC,OAFX,CAGE,QAAQ,CAAC,OAHX,CAIE,MAAM,CAAC,aAJT,CAKE,OAAO,CAAC,GALV,EAOE,oBAAC,YAAD,EAAc,UAAU,CAAC,QAAzB,EACE,oBAAC,KAAD,cADF,CAEE,oBAAC,MAAD,EAAQ,WAAW,CAAC,cAApB,CAAmC,aAAa,CAAC,KAAjD,EACE,8BAAQ,KAAK,CAAC,KAAd,QADF,CAEE,4CAFF,CAFF,CAPF,CAcE,oBAAC,YAAD,EAAc,UAAU,CAAC,QAAzB,EACE,oBAAC,SAAD,EAAW,KAAK,KAAhB,CAAiB,QAAQ,CAAC,MAA1B,eADF,CAdF,CAZF,CAgCE,oBAAC,WAAD,EAAa,QAAQ,CAAC,OAAtB,CAA8B,QAAQ,CAAC,OAAvC,CAA+C,MAAM,CAAC,aAAtD,EACGC,MAAM,CAACK,GAAP,CAAW,SAAAC,KAAK,QACf,qBAAC,WAAD,EAAa,GAAG,CAAEA,KAAK,CAACC,EAAxB,CAA4B,OAAO,CAAC,SAApC,CAA8C,UAAU,CAAC,QAAzD,EACE,oBAAC,QAAD,EACE,EAAE,CAAE1B,IADN,CAEE,SAAS,CAAC,OAFZ,CAGE,QAAQ,CAAC,MAHX,CAIE,MAAM,CAAC,YAJT,EAMGyB,KAAK,CAACA,KAAN,CAAYE,WANf,CADF,CASE,oBAAC,UAAD,EAAY,SAAS,CAAEZ,QAAvB,EACGU,KAAK,CAACA,KAAN,CAAYG,eADf,CATF,CADe,EAAhB,CADH,CAhCF,CADF,CALF,CADF,CA4DD,CAjEM","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useModal } from \"../../../../utils\";\n\nimport { Modal, ModalArea, ModalCloseIcon } from \"../../../utilities\";\nimport {\n  PageHeading,\n  Typography,\n  TextLink\n} from \"../../../../styled/typography\";\nimport {\n  GridWrapper,\n  InputWrapper,\n  FlexWrapper\n} from \"../../../../styled/containers\";\nimport { Select, Label } from \"../../../../styled/forms\";\nimport { RedButton, BlackButton } from \"../../../../styled/buttons\";\nimport { darkGrey } from \"../../../../styled/defaults\";\n\nexport const ViewDrivesModal = ({ totalDrives, totalStorage, drives }) => {\n  const [notes, setNotes] = useState(\"\");\n\n  const { isShowing, toggle } = useModal();\n\n  return (\n    <>\n      <BlackButton small onClick={() => toggle()}>\n        View Drives\n      </BlackButton>\n\n      <Modal isShowing={isShowing} toggle={toggle}>\n        <ModalArea>\n          <ModalCloseIcon toggle={toggle} />\n\n          <PageHeading>Drives</PageHeading>\n          <FlexWrapper padding=\"20px 0 0 0\" justifyContent=\"space-evenly\">\n            <Typography fontSize=\"18px\" fontWeight=\"700\">\n              {`${totalDrives} Drives`}\n            </Typography>\n            <Typography fontSize=\"18px\" fontWeight=\"700\">\n              {`${totalStorage}`}\n            </Typography>\n          </FlexWrapper>\n          <GridWrapper\n            as=\"form\"\n            minWidth=\"508px\"\n            maxWidth=\"508px\"\n            margin=\"20px 0 0 0 \"\n            gridGap=\"0\"\n          >\n            <InputWrapper gridColumn=\"4 / 10\">\n              <Label>Drive</Label>\n              <Select placeholder=\"Select Drive\" defaultOption=\"---\">\n                <option value=\"---\">---</option>\n                <option>Drive A</option>\n              </Select>\n            </InputWrapper>\n            <InputWrapper gridColumn=\"4 / 10\">\n              <RedButton small minWidth=\"100%\">\n                Add / Edit\n              </RedButton>\n            </InputWrapper>\n          </GridWrapper>\n          <GridWrapper minWidth=\"508px\" maxWidth=\"508px\" margin=\"20px 0 0 0 \">\n            {drives.map(drive => (\n              <FlexWrapper key={drive.id} padding=\" 0 10px\" gridColumn=\"span 3\">\n                <TextLink\n                  as={Link}\n                  className=\"hover\"\n                  fontSize=\"18px\"\n                  margin=\"0 10px 0 0\"\n                >\n                  {drive.drive.driveNumber}\n                </TextLink>\n                <Typography fontColor={darkGrey}>\n                  {drive.drive.driveCapacityGb}\n                </Typography>\n              </FlexWrapper>\n            ))}\n          </GridWrapper>\n        </ModalArea>\n      </Modal>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}