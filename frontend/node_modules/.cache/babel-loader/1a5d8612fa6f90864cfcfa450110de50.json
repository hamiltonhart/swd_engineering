{"ast":null,"code":"var _jsxFileName = \"/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/components/Drives/NewDriveForm.js\";\nimport React, { useState } from \"react\";\nimport { InputWrapper } from \"../../styled/containers\";\nimport { Input, Label, Select, Required } from \"../../styled/forms\";\nimport { Button, Grid, InputLabel, OutlinedInput } from \"@material-ui/core\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_DRIVE, ALL_DRIVES_QUERY, HOME_PAGE_QUERY } from \"../../gql\";\nexport const NewDriveForm = ({\n  toggle,\n  nextDriveNumber\n}) => {\n  const [createDrive, {\n    error: createError\n  }] = useMutation(CREATE_DRIVE);\n  const [driveNumber, setDriveNumber] = useState(`${nextDriveNumber}`);\n  const [driveCapacityGb, setDriveCapacityGb] = useState(\"2TB\");\n  const [numberOfDrives, setNumberOfDrives] = useState(\"1\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createDrive({\n      variables: {\n        driveNumber,\n        driveCapacityGb,\n        numberOfDrives\n      },\n      refetchQueries: [{\n        query: ALL_DRIVES_QUERY\n      }, {\n        query: HOME_PAGE_QUERY\n      }],\n      onCompleted: createDriveCompleted()\n    });\n  };\n\n  const createDriveCompleted = () => {\n    toggle();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    container: true,\n    as: \"form\",\n    minWidth: \"350px\",\n    maxWidth: \"350px\",\n    gap: 2,\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Number\"), React.createElement(OutlinedInput, {\n    placeholder: \"1\",\n    value: driveNumber,\n    onChange: e => setDriveNumber(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Capacity\"), React.createElement(Select, {\n    defaultValue: driveCapacityGb,\n    padding: \"16px 18px\",\n    onChange: e => setDriveCapacityGb(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"250GB\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"250GB\"), React.createElement(\"option\", {\n    value: \"500GB\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"500GB\"), React.createElement(\"option\", {\n    value: \"1TB\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"1TB\"), React.createElement(\"option\", {\n    value: \"2TB\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"2TB\"))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Quantity\"), React.createElement(Input, {\n    placeholder: \"1\",\n    value: numberOfDrives,\n    onChange: e => setNumberOfDrives(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(InputWrapper, {\n    gridColumn: \"4 / 10\",\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    size: \"large\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !driveNumber.trim() || !driveCapacityGb | !numberOfDrives.trim(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Create Drives\"))));\n};","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/components/Drives/NewDriveForm.js"],"names":["React","useState","InputWrapper","Input","Label","Select","Required","Button","Grid","InputLabel","OutlinedInput","useMutation","CREATE_DRIVE","ALL_DRIVES_QUERY","HOME_PAGE_QUERY","NewDriveForm","toggle","nextDriveNumber","createDrive","error","createError","driveNumber","setDriveNumber","driveCapacityGb","setDriveCapacityGb","numberOfDrives","setNumberOfDrives","handleSubmit","e","preventDefault","variables","refetchQueries","query","onCompleted","createDriveCompleted","target","value","trim"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { InputWrapper } from \"../../styled/containers\";\nimport { Input, Label, Select, Required } from \"../../styled/forms\";\n\nimport { Button, Grid, InputLabel, OutlinedInput } from \"@material-ui/core\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_DRIVE, ALL_DRIVES_QUERY, HOME_PAGE_QUERY } from \"../../gql\";\n\nexport const NewDriveForm = ({ toggle, nextDriveNumber }) => {\n  const [createDrive, { error: createError }] = useMutation(CREATE_DRIVE);\n\n  const [driveNumber, setDriveNumber] = useState(`${nextDriveNumber}`);\n  const [driveCapacityGb, setDriveCapacityGb] = useState(\"2TB\");\n  const [numberOfDrives, setNumberOfDrives] = useState(\"1\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createDrive({\n      variables: {\n        driveNumber,\n        driveCapacityGb,\n        numberOfDrives,\n      },\n      refetchQueries: [{ query: ALL_DRIVES_QUERY }, { query: HOME_PAGE_QUERY }],\n      onCompleted: createDriveCompleted(),\n    });\n  };\n\n  const createDriveCompleted = () => {\n    toggle();\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        as=\"form\"\n        minWidth=\"350px\"\n        maxWidth=\"350px\"\n        gap={2}\n        onSubmit={(e) => handleSubmit(e)}\n      >\n        <Grid item xs={4}>\n          <InputLabel>Number</InputLabel>\n          <OutlinedInput\n            placeholder=\"1\"\n            value={driveNumber}\n            onChange={(e) => setDriveNumber(e.target.value)}\n          />\n        </Grid>\n\n        <Grid item xs={4}>\n          <InputLabel>Capacity</InputLabel>\n          <Select\n            defaultValue={driveCapacityGb}\n            padding=\"16px 18px\"\n            onChange={(e) => setDriveCapacityGb(e.target.value)}\n          >\n            <option value=\"250GB\">250GB</option>\n            <option value=\"500GB\">500GB</option>\n            <option value=\"1TB\">1TB</option>\n            <option value=\"2TB\">2TB</option>\n          </Select>\n        </Grid>\n\n        <Grid item xs={4}>\n          <Label>Quantity</Label>\n          <Input\n            placeholder=\"1\"\n            value={numberOfDrives}\n            onChange={(e) => setNumberOfDrives(e.target.value)}\n          />\n        </Grid>\n        <InputWrapper gridColumn=\"4 / 10\" width=\"100%\">\n          <Button\n            type=\"submit\"\n            size=\"large\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={\n              !driveNumber.trim() || !driveCapacityGb | !numberOfDrives.trim()\n            }\n          >\n            Create Drives\n          </Button>\n        </InputWrapper>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}