{"ast":null,"code":"var _jsxFileName = \"/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/pages/DrivesListPage.js\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_DRIVES_QUERY } from \"../gql\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { MainWrapper, PageHeadingWrapper } from \"../styled/containers\";\nimport { PageHeading } from \"../styled/typography\";\nimport { DriveListInfo } from \"../components/Drives\";\nimport { NewDriveModal } from \"../components/Drives\";\nimport { DriveListToolbar } from \"../components/Drives/DriveUtilities\";\nconst useStyles = makeStyles({\n  select: {\n    minWidth: \"212px\"\n  },\n  label: {\n    paddingLeft: \"12px\"\n  },\n  cardActionHeading: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    margin: \"20px 10px\"\n  },\n  search: {},\n  tempGrid: {\n    border: \"1px solid black\",\n    padding: \"16px\"\n  },\n  tempText: {\n    border: \"1px solid black\"\n  }\n});\nexport const DriveToolbarContext = React.createContext();\n\nconst DrivesListPage = () => {\n  const [statusFilter, setStatusFilter] = useState(\"1\");\n  const [capacityFilter, setCapacityFilter] = useState(\"0\");\n  const [searchValue, setSearchValue] = useState(\"\");\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_DRIVES_QUERY);\n  const toolbarContext = {\n    searchContext: {\n      searchValue: searchValue,\n      setSearchValue: setSearchValue\n    },\n    filterContext: {\n      statusFilter: statusFilter,\n      setStatusFilter: setStatusFilter,\n      capacityFilter: capacityFilter,\n      setCapacityFilter: setCapacityFilter\n    }\n  };\n  const classes = useStyles();\n  return React.createElement(MainWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(PageHeadingWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(PageHeading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Drives\")), React.createElement(\"div\", {\n    className: classes.cardActionHeading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(NewDriveModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(DriveToolbarContext.Provider, {\n    value: toolbarContext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(DriveListToolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), loading && React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Loading...\"), error && React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, error.message), data && React.createElement(React.Fragment, null, React.createElement(DriveListInfo, {\n    drives: data.drives,\n    statusFilter: statusFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))));\n};\n\nexport default DrivesListPage;","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/pages/DrivesListPage.js"],"names":["React","useState","useQuery","ALL_DRIVES_QUERY","makeStyles","MainWrapper","PageHeadingWrapper","PageHeading","DriveListInfo","NewDriveModal","DriveListToolbar","useStyles","select","minWidth","label","paddingLeft","cardActionHeading","display","justifyContent","margin","search","tempGrid","border","padding","tempText","DriveToolbarContext","createContext","DrivesListPage","statusFilter","setStatusFilter","capacityFilter","setCapacityFilter","searchValue","setSearchValue","data","loading","error","toolbarContext","searchContext","filterContext","classes","message","drives"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,sBAAhD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC;AAC3BQ,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ,GADmB;AAI3BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR,GAJoB;AAO3BC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,OAAO,EAAE,MADQ;AAEjBC,IAAAA,cAAc,EAAE,UAFC;AAGjBC,IAAAA,MAAM,EAAE;AAHS,GAPQ;AAY3BC,EAAAA,MAAM,EAAE,EAZmB;AAa3BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,iBADA;AAERC,IAAAA,OAAO,EAAE;AAFD,GAbiB;AAiB3BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,MAAM,EAAE;AADA;AAjBiB,CAAD,CAA5B;AAsBA,OAAO,MAAMG,mBAAmB,GAAGzB,KAAK,CAAC0B,aAAN,EAA5B;;AAEP,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,CAAC,GAAD,CAAhD;AACA,QAAM,CAAC6B,cAAD,EAAiBC,iBAAjB,IAAsC9B,QAAQ,CAAC,GAAD,CAApD;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AAAEiC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BlC,QAAQ,CAACC,gBAAD,CAAzC;AAEA,QAAMkC,cAAc,GAAG;AACrBC,IAAAA,aAAa,EAAE;AACbN,MAAAA,WAAW,EAAEA,WADA;AAEbC,MAAAA,cAAc,EAAEA;AAFH,KADM;AAKrBM,IAAAA,aAAa,EAAE;AACbX,MAAAA,YAAY,EAAEA,YADD;AAEbC,MAAAA,eAAe,EAAEA,eAFJ;AAGbC,MAAAA,cAAc,EAAEA,cAHH;AAIbC,MAAAA,iBAAiB,EAAEA;AAJN;AALM,GAAvB;AAaA,QAAMS,OAAO,GAAG7B,SAAS,EAAzB;AAEA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAE6B,OAAO,CAACxB,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,EAQE,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEqB,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGF,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHd,EAIGC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACK,OAAX,CAJZ,EAKGP,IAAI,IACH,0CACE,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEA,IAAI,CAACQ,MAA5B;AAAoC,IAAA,YAAY,EAAEd,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANJ,CARF,CADF;AAsBD,CA5CD;;AA8CA,eAAeD,cAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_DRIVES_QUERY } from \"../gql\";\n\nimport { makeStyles } from \"@material-ui/core\";\n\nimport { MainWrapper, PageHeadingWrapper } from \"../styled/containers\";\nimport { PageHeading } from \"../styled/typography\";\nimport { DriveListInfo } from \"../components/Drives\";\nimport { NewDriveModal } from \"../components/Drives\";\nimport { DriveListToolbar } from \"../components/Drives/DriveUtilities\";\n\nconst useStyles = makeStyles({\n  select: {\n    minWidth: \"212px\",\n  },\n  label: {\n    paddingLeft: \"12px\",\n  },\n  cardActionHeading: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    margin: \"20px 10px\",\n  },\n  search: {},\n  tempGrid: {\n    border: \"1px solid black\",\n    padding: \"16px\",\n  },\n  tempText: {\n    border: \"1px solid black\",\n  },\n});\n\nexport const DriveToolbarContext = React.createContext();\n\nconst DrivesListPage = () => {\n  const [statusFilter, setStatusFilter] = useState(\"1\");\n  const [capacityFilter, setCapacityFilter] = useState(\"0\");\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const { data, loading, error } = useQuery(ALL_DRIVES_QUERY);\n\n  const toolbarContext = {\n    searchContext: {\n      searchValue: searchValue,\n      setSearchValue: setSearchValue,\n    },\n    filterContext: {\n      statusFilter: statusFilter,\n      setStatusFilter: setStatusFilter,\n      capacityFilter: capacityFilter,\n      setCapacityFilter: setCapacityFilter,\n    },\n  };\n\n  const classes = useStyles();\n\n  return (\n    <MainWrapper>\n      <PageHeadingWrapper>\n        <PageHeading>Drives</PageHeading>\n      </PageHeadingWrapper>\n      <div className={classes.cardActionHeading}>\n        <NewDriveModal />\n      </div>\n\n      <DriveToolbarContext.Provider value={toolbarContext}>\n        <DriveListToolbar />\n\n        {loading && <h1>Loading...</h1>}\n        {error && <h1>{error.message}</h1>}\n        {data && (\n          <>\n            <DriveListInfo drives={data.drives} statusFilter={statusFilter} />\n          </>\n        )}\n      </DriveToolbarContext.Provider>\n    </MainWrapper>\n  );\n};\n\nexport default DrivesListPage;\n"]},"metadata":{},"sourceType":"module"}