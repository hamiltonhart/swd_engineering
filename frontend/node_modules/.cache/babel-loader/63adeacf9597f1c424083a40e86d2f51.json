{"ast":null,"code":"var _jsxFileName = \"/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/components/Contacts/ContactList.js\";\nimport React, { useState, useContext } from \"react\";\nimport { makeStyles, Paper, Button, Typography } from \"@material-ui/core\";\nimport { useSortContactAlpha, useContactSearch, useToggle } from \"../../utils\";\nimport { ContactPageContext } from \"../../pages/ContactsListPage\";\nimport { ContactListItem } from \"./ContactListItem\";\nimport { ContactDetail } from \"./ContactDetail\";\nimport { ContactListFilter, ContactListSearch } from \"./ContactUtilities\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: theme.spacing(4),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: \"80%\",\n    borderRadius: theme.shape.borderRadius,\n    height: \"500px\",\n    boxShadow: theme.shadows[2],\n    \"& > div\": {\n      borderRadius: 0\n    }\n  },\n  contactList: {\n    minWidth: \"300px\",\n    boxShadow: \"none\",\n    borderRightStyle: \"solid\",\n    borderColor: theme.palette.grey[400],\n    borderWidth: \"1px\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    overflowY: \"auto\"\n  },\n  clearButton: {\n    display: \"block\",\n    marginTop: theme.spacing(1),\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  contactListItems: {\n    marginTop: theme.spacing(1),\n    \"& :hover\": {\n      backgroundColor: theme.palette.grey[400]\n    }\n  },\n  contactInfo: {\n    flexGrow: 1,\n    minHeight: \"300px\",\n    overflowY: \"auto\",\n    padding: theme.spacing(2)\n  },\n  contactInfoContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3)\n  }\n}));\nexport const ContactList = ({\n  contacts\n}) => {\n  // Set to the id of the contact that is selected from the contact list or null by default\n  const [selected, setSelected] = useState(null); // Indicates if the edit window for a contact is showing or not.\n  // Gets passed to the ContactListItem to determine of the edit needs to be closed when selecting a new item\n  // Gets passed to the ContactDetail to determine if the detail or edit view is shown\n\n  const {\n    isShowing: isShowingEdit,\n    toggle: toggleEdit\n  } = useToggle();\n  const {\n    searchContext,\n    sortContext\n  } = useContext(ContactPageContext); // Gets the contact list to be mapped through based on sorting and search\n\n  let contactsList = useContactSearch(contacts, searchContext.searchValue.toLowerCase());\n  contactsList = useSortContactAlpha(contactsList, sortContext.sortValue);\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.contactList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(ContactListSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(ContactListFilter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), searchContext.searchValue && React.createElement(Button, {\n    className: classes.clearButton,\n    color: \"primary\",\n    onClick: () => searchContext.setSearchValue(\"\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Clear Search\"), contactsList.length > 0 ? React.createElement(\"div\", {\n    className: classes.contactListItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, contactsList.map(contact => React.createElement(ContactListItem, {\n    key: contact.id,\n    contact: contact,\n    setSelected: setSelected,\n    isShowing: isShowingEdit,\n    toggle: toggleEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }))) : React.createElement(Typography, {\n    align: \"center\",\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"No Items To Display\")), React.createElement(Paper, {\n    className: classes.contactInfo,\n    elevation: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.contactInfoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(ContactDetail, {\n    contactId: selected,\n    setContactId: setSelected,\n    isShowingEdit: isShowingEdit,\n    toggleEdit: toggleEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/Work/swd_engineering/swd_engineering/frontend/src/components/Contacts/ContactList.js"],"names":["React","useState","useContext","makeStyles","Paper","Button","Typography","useSortContactAlpha","useContactSearch","useToggle","ContactPageContext","ContactListItem","ContactDetail","ContactListFilter","ContactListSearch","useStyles","theme","root","display","justifyContent","marginTop","spacing","marginLeft","marginRight","maxWidth","borderRadius","shape","height","boxShadow","shadows","contactList","minWidth","borderRightStyle","borderColor","palette","grey","borderWidth","paddingTop","paddingBottom","overflowY","clearButton","contactListItems","backgroundColor","contactInfo","flexGrow","minHeight","padding","contactInfoContainer","paddingLeft","paddingRight","ContactList","contacts","selected","setSelected","isShowing","isShowingEdit","toggle","toggleEdit","searchContext","sortContext","contactsList","searchValue","toLowerCase","sortValue","classes","setSearchValue","length","map","contact","id"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nimport { makeStyles, Paper, Button, Typography } from \"@material-ui/core\";\n\nimport { useSortContactAlpha, useContactSearch, useToggle } from \"../../utils\";\nimport { ContactPageContext } from \"../../pages/ContactsListPage\";\nimport { ContactListItem } from \"./ContactListItem\";\nimport { ContactDetail } from \"./ContactDetail\";\nimport { ContactListFilter, ContactListSearch } from \"./ContactUtilities\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: theme.spacing(4),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: \"80%\",\n    borderRadius: theme.shape.borderRadius,\n    height: \"500px\",\n    boxShadow: theme.shadows[2],\n    \"& > div\": {\n      borderRadius: 0,\n    },\n  },\n  contactList: {\n    minWidth: \"300px\",\n    boxShadow: \"none\",\n    borderRightStyle: \"solid\",\n    borderColor: theme.palette.grey[400],\n    borderWidth: \"1px\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    overflowY: \"auto\",\n  },\n  clearButton: {\n    display: \"block\",\n    marginTop: theme.spacing(1),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  contactListItems: {\n    marginTop: theme.spacing(1),\n    \"& :hover\": {\n      backgroundColor: theme.palette.grey[400],\n    },\n  },\n  contactInfo: {\n    flexGrow: 1,\n    minHeight: \"300px\",\n    overflowY: \"auto\",\n    padding: theme.spacing(2),\n  },\n  contactInfoContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n}));\n\nexport const ContactList = ({ contacts }) => {\n  // Set to the id of the contact that is selected from the contact list or null by default\n  const [selected, setSelected] = useState(null);\n\n  // Indicates if the edit window for a contact is showing or not.\n  // Gets passed to the ContactListItem to determine of the edit needs to be closed when selecting a new item\n  // Gets passed to the ContactDetail to determine if the detail or edit view is shown\n  const { isShowing: isShowingEdit, toggle: toggleEdit } = useToggle();\n\n  const { searchContext, sortContext } = useContext(ContactPageContext);\n\n  // Gets the contact list to be mapped through based on sorting and search\n  let contactsList = useContactSearch(\n    contacts,\n    searchContext.searchValue.toLowerCase()\n  );\n  contactsList = useSortContactAlpha(contactsList, sortContext.sortValue);\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.contactList}>\n        <ContactListSearch />\n        <ContactListFilter />\n\n        {/* If a search value is present, show the clear search button */}\n        {searchContext.searchValue && (\n          <Button\n            className={classes.clearButton}\n            color=\"primary\"\n            onClick={() => searchContext.setSearchValue(\"\")}\n          >\n            Clear Search\n          </Button>\n        )}\n        {contactsList.length > 0 ? (\n          <div className={classes.contactListItems}>\n            {contactsList.map((contact) => (\n              <ContactListItem\n                key={contact.id}\n                contact={contact}\n                setSelected={setSelected}\n                isShowing={isShowingEdit}\n                toggle={toggleEdit}\n              />\n            ))}\n          </div>\n        ) : (\n          <Typography align=\"center\" variant=\"h5\">\n            No Items To Display\n          </Typography>\n        )}\n      </Paper>\n      <Paper className={classes.contactInfo} elevation={0}>\n        <div className={classes.contactInfoContainer}>\n          <ContactDetail\n            contactId={selected}\n            setContactId={setSelected}\n            isShowingEdit={isShowingEdit}\n            toggleEdit={toggleEdit}\n          />\n        </div>\n      </Paper>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}